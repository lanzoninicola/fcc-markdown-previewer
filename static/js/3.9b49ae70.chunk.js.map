{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","validation/requirements/color.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","input","Error","colorParamMissed","colorNotFound","colorAvailable","colorDataType","shadeDataType","shadeNotFound","shadeAvailable","color","theme","isColorExists","keys","includes","join","shade","themePalette","isShadeExists"],"mappings":"gMAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,GIL/F,SAASC,IACd,GAAI,UAAKJ,OAAS,EAChB,MAAM,IAAIK,MAAJ,mEAKR,IAAMC,EAAmB,WACvB,MAAM,IAAID,MAAJ,yDAGFE,EAAgB,SAACC,GACrB,MAAM,IAAIH,MAAJ,iFACsEG,EADtE,OAKFC,EAAgB,WACpB,MAAM,IAAIJ,MACR,8FAIEK,EAAgB,WACpB,MAAM,IAAIL,MACR,iGAIEM,EAAgB,SAACC,GACrB,MAAM,IAAIP,MAAJ,iFACsEO,EADtE,OAKR,GAAgB,QAAZ,yCAEF,GAAI5B,MAAMC,QAAN,yCAAwB,CAAC,IAAD,mDACnB4B,EADmB,KACZC,EADY,KAGpBC,EAAgB,kBACpB3B,OAAO4B,KAAKF,EAAK,QAAL,QAA4BG,SAASJ,IAMnD,GAJc,KAAVA,GACFP,IAGY,KAAVO,IAAiBE,IAAiB,CACpC,IAAIP,EAAiBpB,OAAO4B,KAAKF,EAAK,QAAL,QAA4BI,KAAK,MAElEX,EAAcC,GAGF,KAAVK,GAAiC,kBAAVA,GACzBJ,QAEG,CACL,IAAMI,EAAK,wCAEG,KAAVA,GACFP,IAGY,KAAVO,GAAiC,kBAAVA,GACzBJ,IAKN,GAAgB,QAAZ,yCAEF,GAAIzB,MAAMC,QAAN,yCAAwB,CAAC,IAAD,mDACnBkC,EADmB,KACZC,EADY,KAGpBC,EAAgB,kBAAMjC,OAAO4B,KAAKI,GAAcH,SAASE,IAE/D,GAAc,KAAVA,IAAiBE,IAAiB,CACpC,IAAIT,EAAiBxB,OAAO4B,KAAKI,GAAcF,KAAK,MACpDP,EAAcC,GAGF,KAAVO,GAAiC,kBAAVA,GACzBT,QAEG,CACL,IAAMS,EAAK,wCACG,KAAVA,GAAiC,kBAAVA,GACzBT","file":"static/js/3.9b49ae70.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export function input(...args) {\r\n  if (args.length > 2) {\r\n    throw new Error(\r\n      `themeFactory() - color(): Function accepts only two parameters.`\r\n    );\r\n  }\r\n\r\n  const colorParamMissed = () => {\r\n    throw new Error(`themeFactory() - color(): colorName parameter missed`);\r\n  };\r\n\r\n  const colorNotFound = (colorAvailable) => {\r\n    throw new Error(\r\n      `themeFactory() - color(): Color not found... You have choose between: \"${colorAvailable}\"`\r\n    );\r\n  };\r\n\r\n  const colorDataType = () => {\r\n    throw new Error(\r\n      'themeFactory(): The \"color\" parameter must be a \"string\". Eg. \"primary\" or \"secondary\"...'\r\n    );\r\n  };\r\n\r\n  const shadeDataType = () => {\r\n    throw new Error(\r\n      'themeFactory(): The \"shade\" parameter must be a \"string\". Eg. \"main\" or \"dark\" or \"light\"...'\r\n    );\r\n  };\r\n\r\n  const shadeNotFound = (shadeAvailable) => {\r\n    throw new Error(\r\n      `themeFactory() - color(): Shade not found... You have choose between: \"${shadeAvailable}\"`\r\n    );\r\n  };\r\n\r\n  if (args[0] !== null) {\r\n    // validation of first parameter\r\n    if (Array.isArray(args[0])) {\r\n      const [color, theme] = args[0];\r\n\r\n      const isColorExists = () =>\r\n        Object.keys(theme[\"palette\"][\"colors\"]).includes(color);\r\n\r\n      if (color === \"\") {\r\n        colorParamMissed();\r\n      }\r\n\r\n      if (color !== \"\" && !isColorExists()) {\r\n        let colorAvailable = Object.keys(theme[\"palette\"][\"colors\"]).join(\", \");\r\n\r\n        colorNotFound(colorAvailable);\r\n      }\r\n\r\n      if (color !== \"\" && typeof color !== \"string\") {\r\n        colorDataType();\r\n      }\r\n    } else {\r\n      const color = args[0];\r\n\r\n      if (color === \"\") {\r\n        colorParamMissed();\r\n      }\r\n\r\n      if (color !== \"\" && typeof color !== \"string\") {\r\n        colorDataType();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (args[1] !== null) {\r\n    // validation of second parameter\r\n    if (Array.isArray(args[1])) {\r\n      const [shade, themePalette] = args[1];\r\n\r\n      const isShadeExists = () => Object.keys(themePalette).includes(shade);\r\n\r\n      if (shade !== \"\" && !isShadeExists()) {\r\n        let shadeAvailable = Object.keys(themePalette).join(\", \");\r\n        shadeNotFound(shadeAvailable);\r\n      }\r\n\r\n      if (shade !== \"\" && typeof shade !== \"string\") {\r\n        shadeDataType();\r\n      }\r\n    } else {\r\n      const shade = args[1];\r\n      if (shade !== \"\" && typeof shade !== \"string\") {\r\n        shadeDataType();\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}